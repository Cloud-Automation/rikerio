#ifndef __RIKERIO_LIB_H__
#define __RIKERIO_LIB_H__

#include <stdint.h>
#include <sys/types.h>

#include "string"
#include "vector"

#define RIO_VERSION_MAJOR @VERSION_MAJOR@
#define RIO_VERSION_MINOR @VERSION_MINOR@

#define PACKED __attribute__((__packed__))

namespace RikerIO {

static const int result_ok = 0;
static const int result_error = -1;

static const std::string root_path = "/var/run/rikerio";
static const std::string persistent_path = "/var/lib/rikerio";
static const std::string allocation_filename = "alloc";
static const std::string shared_memory_filename = "shm";

enum class Type {
    UNDEF  = 0,
    BIT    = 1,
    BOOL   = 2,
    UINT8  = 3,
    INT8   = 4,
    UINT16 = 5,
    INT16  = 6,
    UINT32 = 7,
    INT32  = 8,
    UINT64 = 9,
    INT64  = 10,
    FLOAT  = 11,
    DOUBLE = 12,
    STRING = 13
};

#define RIO_RET_OK                0
#define RIO_RET_ERROR            -1

#define RIO_ERROR_FILE_NOT_FOUND -2
#define RIO_ERROR_FILE_LOCK      -3
#define RIO_ERROR_FILE_UNLOCK    -4



struct rio_profile_st;
struct rio_adr_st;
struct rio_adr_entry_st;
struct rio_data_st;

typedef struct rio_profile_st rio_profile_t;
typedef struct rio_adr_st rio_adr_t;
typedef struct rio_alloc_st rio_alloc_t;
typedef struct rio_data_st rio_data_t;

typedef char rio_id_t[32];
typedef char rio_label_t[255];
typedef uint32_t rio_byte_offset_t;
typedef uint8_t rio_bit_index_t;
typedef uint16_t rio_type_t;
typedef uint32_t rio_size_t;

struct PACKED rio_adr_st {
    rio_byte_offset_t byte_offset;
    rio_bit_index_t bit_offset;
};

struct PACKED rio_data_st {
    rio_id_t id;
    rio_adr_t adr;
    rio_type_t type;
    rio_size_t byte_size;
};

rio_size_t get_bitsizeof(rio_type_t type);

struct PACKED Profile {
    rio_id_t id;
    char* ptr;
    size_t byte_size;
    int sem_key;
    int sem_id;
};

struct PACKED Allocation {
    uint32_t offset;
    uint32_t byte_size;
    rio_id_t id; // optional
    char* ptr;
};


int init(const std::string&, Profile&);

/**
 * @brief allocate new memory of the shared memory from a specific profile
 * @param char* profileId
 * @param uint32_t requested memory size
 * @param char[32] optional id
 * @param void** pointer
 * @param uint32_t* offset
 * @returns 0 on success, -1 on error
 */
int alloc(const Profile&, uint32_t, const std::string&, Allocation&);

/**
 * @brief allocate new memory of the shared memory from a specific profile
 * @param char* profileId
 * @param uint32_t requested memory size
 * @param void** pointer
 * @param uint32_t* offset
 * @returns 0 on success, -1 on error
 */
int realloc(const Profile&, uint32_t, const std::string&, Allocation&);

/**
 * @brief free allocation on a profile with a offset
 * @param char* profileId
 * @param uint32_t offset
 * @returns 0 on success, -1 on error
 */
int dealloc(const Profile&, const std::string&);

/**
 * @brief List all allocations
 * @param rio_profile_t profile
 * @param Allocation[] List of allocations
 * @param unsigned int count of preallocated list items
 * @param unsigned int* number of items copied to the list
 * @returns 0 on success, -1 on error
 */
int alloc_list(const std::string&, std::vector<Allocation>);

/**
 * @brief lock semaphore
 * @param int semaphore id
 */
int lock(rio_profile_t&);

/**
 * @brief unlock semaphore
 * @param int semaphore id
 */
int unlock(rio_profile_t&);


namespace Data {

/**
 * @brief Add new link address
 * @param rio_profile_t profileId
 * @param rio_link_t link key
 * @param rio_adr_t adr, NULL removed data
 * @returns 0 on success, -1 on failure
 */
int set(const std::string&, const std::string&, rio_adr_t&);

/**
 * @brief Get all adr from a link.
 * @param rio_profile_t profile
 * @param rio_link_t link
 * @param rio_adr_t[] address list
 * @param unsigned int number of list items in the preallocated list
 * @param unsigned int* number of items copied to the list
 * @returns 0 on success or -1 on error
 */
int get(const std::string&, const std::string&, rio_adr_t&);

/**
 * @brief get list of links
 * @param char* profileId
 * @param rio_link_t[] return list of links
 * @param unsigned int number of preallocated items in the list
 * @param unsigned int* number of items copied to the list
 * @return 0 on success, -1 on error
 */
int list(const std::string&, std::vector<rio_data_t>&);

}

namespace Link {
/**
 * @brief create alias.
 * @param rio_profile_t profile
 * @param rio_alias_t alias
 * @param rio_link_t link
 * @returns 0 on success, -1 on failure
 */
int set(const std::string&, const std::string&, const std::string&);

/**
 * @brief remove alias.
 * @param rio_profile_t profile
 * @param rio_link_t*
 * @param rio_data_t* specific to remove or null for all
 * @returns 0 on success, -1 on failure
 */
int remove(const std::string&, const std::string&, const std::string& = "");

/**
 * @brief get linkcount from alias
 * @param rio_profile_t profileId
 * @param rio_alias_t alias
 * @params unsigned int* pointer to count value
 * @returns number of links, -1 on error
 */
int get(const std::string&, const std::string&, std::vector<rio_data_t>&);


}

}
#endif
