/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_STUBCLIENT_H_
#define JSONRPC_CPP_STUB_STUBCLIENT_H_

#include <jsonrpccpp/client.h>

class StubClient : public jsonrpc::Client
{
public:
    StubClient(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2) : jsonrpc::Client(conn, type) {}

    Json::Value master_register(const std::string& name, int pid)
    {
        Json::Value p;
        p["name"] = name;
        p["pid"] = pid;
        Json::Value result = this->CallMethod("master.register", p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value master_unregister(const std::string& token)
    {
        Json::Value p;
        p["token"] = token;
        Json::Value result = this->CallMethod("master.unregister", p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value master_list()
    {
        Json::Value p;
        p = Json::nullValue;
        Json::Value result = this->CallMethod("master.list", p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value alloc(int size, const std::string& token)
    {
        Json::Value p;
        p["size"] = size;
        p["token"] = token;
        Json::Value result = this->CallMethod("alloc", p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value dealloc(int offset, const std::string& token)
    {
        Json::Value p;
        p["offset"] = offset;
        p["token"] = token;
        Json::Value result = this->CallMethod("dealloc", p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value data_create(const Json::Value& data, const std::string& id, const std::string& token)
    {
        Json::Value p;
        p["data"] = data;
        p["id"] = id;
        p["token"] = token;
        Json::Value result = this->CallMethod("data.create", p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value data_remove(const std::string& id, const std::string& token)
    {
        Json::Value p;
        p["id"] = id;
        p["token"] = token;
        Json::Value result = this->CallMethod("data.remove", p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value data_list(const std::string& id)
    {
        Json::Value p;
        p["id"] = id;
        Json::Value result = this->CallMethod("data.list", p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value data_get(const std::string& id)
    {
        Json::Value p;
        p["id"] = id;
        Json::Value result = this->CallMethod("data.get", p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value link_add(const std::string& dataId, const std::string& linkId)
    {
        Json::Value p;
        p["dataId"] = dataId;
        p["linkId"] = linkId;
        Json::Value result = this->CallMethod("link.add", p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value link_remove(const std::string& dataId, const std::string& linkId)
    {
        Json::Value p;
        p["dataId"] = dataId;
        p["linkId"] = linkId;
        Json::Value result = this->CallMethod("link.remove", p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value link_list(const std::string& pattern)
    {
        Json::Value p;
        p["pattern"] = pattern;
        Json::Value result = this->CallMethod("link.list", p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
    Json::Value link_get(const std::string& id)
    {
        Json::Value p;
        p["id"] = id;
        Json::Value result = this->CallMethod("link.get", p);
        if (result.isObject())
            return result;
        else
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
    }
};

#endif //JSONRPC_CPP_STUB_STUBCLIENT_H_
